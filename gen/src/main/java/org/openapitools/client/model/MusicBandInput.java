/*
 * MusicBand API
 * API для управления коллекцией объектов MusicBand и дополнительных операций.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AlbumInput;
import org.openapitools.client.model.CoordinatesInput;
import org.openapitools.client.model.MusicGenre;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MusicBandInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-15T22:57:45.298527+03:00[Europe/Moscow]", comments = "Generator version: 7.7.0")
public class MusicBandInput {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_COORDINATES = "coordinates";
  @SerializedName(SERIALIZED_NAME_COORDINATES)
  private CoordinatesInput coordinates;

  public static final String SERIALIZED_NAME_NUMBER_OF_PARTICIPANTS = "numberOfParticipants";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_PARTICIPANTS)
  private Integer numberOfParticipants;

  public static final String SERIALIZED_NAME_SINGLES_COUNT = "singlesCount";
  @SerializedName(SERIALIZED_NAME_SINGLES_COUNT)
  private Integer singlesCount;

  public static final String SERIALIZED_NAME_GENRE = "genre";
  @SerializedName(SERIALIZED_NAME_GENRE)
  private MusicGenre genre;

  public static final String SERIALIZED_NAME_BEST_ALBUM = "bestAlbum";
  @SerializedName(SERIALIZED_NAME_BEST_ALBUM)
  private AlbumInput bestAlbum;

  public MusicBandInput() {
  }

  public MusicBandInput name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Название группы
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public MusicBandInput coordinates(CoordinatesInput coordinates) {
    this.coordinates = coordinates;
    return this;
  }

  /**
   * Get coordinates
   * @return coordinates
   */
  @javax.annotation.Nonnull
  public CoordinatesInput getCoordinates() {
    return coordinates;
  }

  public void setCoordinates(CoordinatesInput coordinates) {
    this.coordinates = coordinates;
  }


  public MusicBandInput numberOfParticipants(Integer numberOfParticipants) {
    this.numberOfParticipants = numberOfParticipants;
    return this;
  }

  /**
   * Количество участников
   * minimum: 1
   * @return numberOfParticipants
   */
  @javax.annotation.Nonnull
  public Integer getNumberOfParticipants() {
    return numberOfParticipants;
  }

  public void setNumberOfParticipants(Integer numberOfParticipants) {
    this.numberOfParticipants = numberOfParticipants;
  }


  public MusicBandInput singlesCount(Integer singlesCount) {
    this.singlesCount = singlesCount;
    return this;
  }

  /**
   * Количество синглов
   * minimum: 1
   * @return singlesCount
   */
  @javax.annotation.Nullable
  public Integer getSinglesCount() {
    return singlesCount;
  }

  public void setSinglesCount(Integer singlesCount) {
    this.singlesCount = singlesCount;
  }


  public MusicBandInput genre(MusicGenre genre) {
    this.genre = genre;
    return this;
  }

  /**
   * Get genre
   * @return genre
   */
  @javax.annotation.Nonnull
  public MusicGenre getGenre() {
    return genre;
  }

  public void setGenre(MusicGenre genre) {
    this.genre = genre;
  }


  public MusicBandInput bestAlbum(AlbumInput bestAlbum) {
    this.bestAlbum = bestAlbum;
    return this;
  }

  /**
   * Get bestAlbum
   * @return bestAlbum
   */
  @javax.annotation.Nonnull
  public AlbumInput getBestAlbum() {
    return bestAlbum;
  }

  public void setBestAlbum(AlbumInput bestAlbum) {
    this.bestAlbum = bestAlbum;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MusicBandInput musicBandInput = (MusicBandInput) o;
    return Objects.equals(this.name, musicBandInput.name) &&
        Objects.equals(this.coordinates, musicBandInput.coordinates) &&
        Objects.equals(this.numberOfParticipants, musicBandInput.numberOfParticipants) &&
        Objects.equals(this.singlesCount, musicBandInput.singlesCount) &&
        Objects.equals(this.genre, musicBandInput.genre) &&
        Objects.equals(this.bestAlbum, musicBandInput.bestAlbum);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, coordinates, numberOfParticipants, singlesCount, genre, bestAlbum);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MusicBandInput {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    coordinates: ").append(toIndentedString(coordinates)).append("\n");
    sb.append("    numberOfParticipants: ").append(toIndentedString(numberOfParticipants)).append("\n");
    sb.append("    singlesCount: ").append(toIndentedString(singlesCount)).append("\n");
    sb.append("    genre: ").append(toIndentedString(genre)).append("\n");
    sb.append("    bestAlbum: ").append(toIndentedString(bestAlbum)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("coordinates");
    openapiFields.add("numberOfParticipants");
    openapiFields.add("singlesCount");
    openapiFields.add("genre");
    openapiFields.add("bestAlbum");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("coordinates");
    openapiRequiredFields.add("numberOfParticipants");
    openapiRequiredFields.add("genre");
    openapiRequiredFields.add("bestAlbum");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MusicBandInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MusicBandInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MusicBandInput is not found in the empty JSON string", MusicBandInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MusicBandInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MusicBandInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MusicBandInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `coordinates`
      CoordinatesInput.validateJsonElement(jsonObj.get("coordinates"));
      // validate the required field `genre`
      MusicGenre.validateJsonElement(jsonObj.get("genre"));
      // validate the required field `bestAlbum`
      AlbumInput.validateJsonElement(jsonObj.get("bestAlbum"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MusicBandInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MusicBandInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MusicBandInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MusicBandInput.class));

       return (TypeAdapter<T>) new TypeAdapter<MusicBandInput>() {
           @Override
           public void write(JsonWriter out, MusicBandInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MusicBandInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MusicBandInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MusicBandInput
   * @throws IOException if the JSON string is invalid with respect to MusicBandInput
   */
  public static MusicBandInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MusicBandInput.class);
  }

  /**
   * Convert an instance of MusicBandInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

